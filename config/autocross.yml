# Filtering
min_cone_confidence:            0.0     # float  [-]   minimum required confidence to take a cone into account.
max_triangle_edge_len:          7.0     # double [m]   all triangles will have all edge lenghts below max_triangle_edge_len.
min_triangle_angle:             0.35    # double [rad] all triangles with any angle below THIS, will be removed.

# Search
## General search behavior
best_search_options_to_keep:    50      # int    [num] during the search, how many "best" different paths is allowed to keep in memory.
search_radius:                  5.0     # double [m]   maximum distance there can be from one midpoint to the next one.
max_search_options:             2       # int    [num] number of maximum children of every node in the tree during the search, 2 is stable, 3 risky
overnext_midpoint_angle:        0.2     # double [rad] when considering the max_search_options, it might happen that some (or all) of the other midpoints considered are indeed the overnext midpoint because of a big search_radius, in this case, since one is next of the other, we do not want to add both to the search (only the one that could be the next and not overnext). We filter them by the angle. If other candidates have a very similar angle (less than THIS) to the best candidate, they are removed.
allow_intersection:             false   # bool   [-]   whether or not to allow path intersection (a loop in the path).

## Heuristic weighting
heur_dist_weight:               0.1     # float  [-]   [0.0,1.0] weight of the distance in the next midpoint heuristic. Assume heur_angle_weight = 1.0-this.
heur_track_width_diff_weight:   0.8     # float  [-]   weight of the track width difference in the next midpoint heuristic.

## Subpath stop by hard threshold: a midpoint will not be added to a subpath if it does not comply with below parameters
max_way_horizon_size:           0       # int    [num] max horizon size of the path (max number of midpoints computer ahead of the car). 0 for infinite.
max_angle_diff:                 0.8     # double [rad] maximum angle difference between points in midline. Minimum 0, maximum pi/2.
min_track_width:                2.5     # double [-]   minimum track width.
max_next_heuristic:             1.5     # double [-]   from one midpoint to the next one, this is the maximum value a next midpoint's heuristic can have.
min_dist_between_midpoints:     0.81    # double [m]   minimum possible distance between two midpoints.

# Loop Closure
shutdown_on_loop_closure:       false   # bool   [-]   whether or not it will shut itself down after a loop was closed.
max_dist_loop_closure:          5.0     # double [m]   maximum distance between first and last midpoint to consider it a loop.
max_angle_diff_loop_closure:    0.65    # double [rad] maximum angle difference between first and last midpoints. Expected to be same as max_angle_diff but it may come in hand having two separated.
extra_tree_height_closure:      7       # int    [num] when closing the loop, how many extra "looped" midpoints should the search consider.

# Replan flag
vital_num_midpoints:            10      # int    [num] number of midpoints that are considered "vital" from the car's position on. This is taken into account when computing the new_close_midpoints flag when converting to custom_msgs::PathLimits.

# Fail safe(s)
failsafe_max_way_horizon_size:  6       # int    [num] during a failsafe event, the size of the way horizon will be set to this value. To avoid undesirable effects.
general_failsafe:               true    # bool   [-]   whether or not to allow the general fail safe to activate. This means, when no path is possible (shorter than a constant) by using no color, it will automatically increase all search parameters by a factor. It will switch back to normal function, once the path (calculated with normal parameters) is long enough.
general_failsafe_safetyFactor:  2.0     # double [-]   when general failsafe is activated, the search parameters will be increased by a factor.
